{"version":3,"sources":["../../../src/basic/Content.js"],"names":["Content","props","children","contentContainerStyle","disableKBDismissScroll","keyboardShouldPersistTaps","padder","style","scrollEnable","containerStyle","flex","backgroundColor","variables","context","theme","variable","Wrapper","KeyboardAwareScrollView","View","padderConfig","padding","contentPadding","undefined","x","y","_scrollview","c","_root","PureComponent","contextTypes","PropTypes","object","propTypes","bool","string","oneOfType","number","array","defaultProps","StyledContent","mapPropsToStyleNames"],"mappings":"y1BAAA,iEACA,qC,mDACA,4B,2CACA,yCACA,mGAEA,qD,iDACA,mE,yEACA,2C,q7BAEMA,Q,2RAKK,4BASH,KAAKC,KATF,CAELC,QAFK,QAELA,QAFK,CAGLC,qBAHK,QAGLA,qBAHK,CAILC,sBAJK,QAILA,sBAJK,CAKLC,yBALK,QAKLA,yBALK,CAMLC,MANK,QAMLA,MANK,CAOLC,KAPK,QAOLA,KAPK,CAQLC,YARK,QAQLA,YARK,CAWP,GAAMC,gBAAiB,CACrBC,KAAM,CADe,CAErBC,gBAAiB,uBAASJ,KAAT,EAAgBI,eAFZ,CAAvB,CAKA,GAAMC,WAAY,KAAKC,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SADnC,CAEdG,kBAFJ,CAIA,GAAMC,SAAUR,aAAeS,2DAAf,CAAyCC,iBAAzD,CACA,GAAMC,cAAe,CACnBC,QAASd,OAASM,UAAUS,cAAnB,CAAoCC,SAD1B,CAArB,CAIA,MACE,+BAAC,yBAAD,EAAc,MAAOb,cAArB,iDACE,8BAAC,OAAD,WACE,MAAO,CAACU,YAAD,CAAehB,qBAAf,CADT,CAEE,iCAAkC,KAFpC,CAGE,oBAAqBC,uBAAyB,IAAzB,CAAgC,CAAEmB,EAAG,CAAL,CAAQC,EAAG,CAAX,CAHvD,CAIE,0BAA2BnB,2BAA6B,SAJ1D,CAKE,IAAK,eAAK,CACR,OAAKoB,WAAL,CAAmBC,CAAnB,CACA,OAAKC,KAAL,CAAaD,CAAb,CACD,CARH,EASM,KAAKzB,KATX,EAUE,sBAAuB,CAACkB,YAAD,CAAehB,qBAAf,CAVzB,kDAYGD,QAZH,CADF,CADF,CAkBD,C,qBAhDmB0B,oB,EAAhB5B,O,CACG6B,Y,CAAe,CACpBf,MAAOgB,oBAAUC,MADG,C,CAkDxB/B,QAAQgC,SAAR,CAAoB,CAClB5B,uBAAwB0B,oBAAUG,IADhB,CAElB5B,0BAA2ByB,oBAAUI,MAFnB,CAGlB5B,OAAQwB,oBAAUG,IAHA,CAIlB1B,MAAOuB,oBAAUK,SAAV,CAAoB,CACzBL,oBAAUC,MADe,CAEzBD,oBAAUM,MAFe,CAGzBN,oBAAUO,KAHe,CAApB,CAJW,CASlB7B,aAAcsB,oBAAUG,IATN,CAApB,CAYAjC,QAAQsC,YAAR,CAAuB,CACrB9B,aAAc,IADO,CAAvB,CAIA,GAAM+B,eAAgB,yCACpB,oBADoB,CAEpB,EAFoB,CAGpBC,8BAHoB,EAIpBxC,OAJoB,CAAtB,C,QAM0BA,O,CAAjBuC,a","file":"Content.js","sourcesContent":["import { connectStyle } from 'native-base-shoutem-theme';\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { SafeAreaView, View } from 'react-native';\nimport { KeyboardAwareScrollView } from '@codler/react-native-keyboard-aware-scroll-view';\n\nimport variable from '../theme/variables/platform';\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\nimport getStyle from '../utils/getStyle';\n\nclass Content extends PureComponent {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  render() {\n    const {\n      children,\n      contentContainerStyle,\n      disableKBDismissScroll,\n      keyboardShouldPersistTaps,\n      padder,\n      style,\n      scrollEnable\n    } = this.props;\n\n    const containerStyle = {\n      flex: 1,\n      backgroundColor: getStyle(style).backgroundColor\n    };\n\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n\n    const Wrapper = scrollEnable ? KeyboardAwareScrollView : View;\n    const padderConfig = {\n      padding: padder ? variables.contentPadding : undefined\n    };\n\n    return (\n      <SafeAreaView style={containerStyle}>\n        <Wrapper\n          style={[padderConfig, contentContainerStyle]}\n          automaticallyAdjustContentInsets={false}\n          resetScrollToCoords={disableKBDismissScroll ? null : { x: 0, y: 0 }}\n          keyboardShouldPersistTaps={keyboardShouldPersistTaps || 'handled'}\n          ref={c => {\n            this._scrollview = c;\n            this._root = c;\n          }}\n          {...this.props}\n          contentContainerStyle={[padderConfig, contentContainerStyle]}\n        >\n          {children}\n        </Wrapper>\n      </SafeAreaView>\n    );\n  }\n}\n\nContent.propTypes = {\n  disableKBDismissScroll: PropTypes.bool,\n  keyboardShouldPersistTaps: PropTypes.string,\n  padder: PropTypes.bool,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  scrollEnable: PropTypes.bool\n};\n\nContent.defaultProps = {\n  scrollEnable: true\n};\n\nconst StyledContent = connectStyle(\n  'NativeBase.Content',\n  {},\n  mapPropsToStyleNames\n)(Content);\n\nexport { StyledContent as Content };\n"]}